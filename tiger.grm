(* Grammar for the Tiger programming language
   Summer 2014
   Cameron Little *)

open Symbol
structure A = Absyn

datatype rval = RFieldVar of symbol * A.pos
              | RSubscriptVar of A.exp * A.pos

%%


%term
   EOF
 | ID of string
 | INT of int | STRING of string
 | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
 | LBRACE | RBRACE | DOT
 | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
 | AND | OR | ASSIGN
 | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
 | BREAK | NIL
 | FUNCTION | VAR | TYPE
 | UMINUS
 | CLASS | EXTENDS | METHOD | NEW

%nonterm
   program      of A.exp
 | classdec
 | classfield
 | classfields
 | crfield      of (symbol * A.exp * A.pos) list
 | crrecord     of (symbol * A.exp * A.pos) list
 | ctlexp       of A.exp
 | dec          of A.dec
 | decs         of A.dec list
 | exp          of A.exp
 | exps         of (A.exp * pos) list
 | fundec       of A.fundec
 | fundecs      of A.dec
 | lvalue       of A.var
 | rvalue       of rval
 | method
 | opexp        of A.exp
 | param        of A.exp list
 | params       of A.exp list
 | ty           of A.ty
 | tyid         of symbol
 | tyfield      of A.field
 | tyfields     of A.field list
 | tyrecord     of A.field list
 | tydec        of {name: symbol, ty: A.ty, pos: A.pos}
 | tydecs       of {name: symbol, ty: A.ty, pos: A.pos} list
 | vardec       of A.dec

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword
  WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY
  IF THEN ELSE DO OF NIL CLASS EXTENDS METHOD NEW

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* precedence *)
%nonassoc   DO THEN OF          (* low *)
%nonassoc   ELSE                 (* | *)
%left       COMMA                (* | *)
%nonassoc   ASSIGN               (* | *)
%left       AND OR               (* | *)
%nonassoc   EQ NEQ GT GE LT LE   (* | *)
%left       PLUS MINUS           (* | *)
%left       TIMES DIVIDE         (* | *)
%left       UMINUS              (* high *)


%%


(* start *)
program	: exp				            (exp)

(* declarations *)
decs : dec decs                         ([dec] @ decs)
     |                                  ([])
dec : tydecs                            (A.TypeDec(tydecs))
    | vardec                            (vardec)
    | fundecs                           ()
    | classdec                          ()

(* type declarations *)
tydecs : tydec tydecs                   ([tydec] @ tydecs)
       | tydec                          ([tydec])
tydec : TYPE tyid EQ ty                 ({name=tyid, ty=ty, pos=TYPEright})
ty : tyid                               (A.NameTy(tyid, tyidleft))
   | tyrecord                           (A.RecordTy(tyrecord))
   | ARRAY OF tyid                      (A.ArrayTy(tyid, OFleft))
tyid : ID                               (symbol ID)
tyrecord : LBRACE tyfields RBRACE       (tyfields)

(* variable declarations *)
vardec : VAR ID ASSIGN exp              (A.VarDec{name=symbol ID, escape=ref true, typ=NONE, init=exp, pos=IDleft})
       | VAR ID COLON tyid ASSIGN exp   (A.VarDec{name=symbol ID, escape=ref true, typ=SOME(tyid, tyidleft), init=exp, pos=IDleft})

(* function declarations *)
fundecs : fundec fundecs                (A.FunctionDec([fundec] @ fundecs))
        | fundec                        (A.FunctionDec([fundec]))
fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=symbol ID, params=tyfields, result=NONE, pos=IDleft})
       | FUNCTION ID LPAREN tyfields RPAREN COLON tyid EQ exp ({name=symbol ID, params=tyfields, result=SOME tyid, pos=IDleft})

(* class declarations *)
classdec : CLASS ID EXTENDS ID LBRACE classfields RBRACE ()
classfields : classfields classfield    ()
            |                           ()
classfield : vardec                     ()
           | method                     ()
(* method declaration *)
method : METHOD ID LPAREN tyfields RPAREN EQ exp ()
       | METHOD ID LPAREN tyfields RPAREN COLON tyid EQ exp ()

(* type fields: for records and functions *)
tyfields : tyfield COMMA tyfields       ([tyfield] @ tyfields)
         | tyfield                      ([tyfield])
         |                              ([])
tyfield : ID COLON tyid                 ({name=symbol ID, escape=ref true, typ=tyid, pos=COLONleft})

(* general expressions *)
exp : LPAREN exps RPAREN                (A.SeqExp exps)
    | LPAREN RPAREN                     (A.SeqExp [])
    | INT                               (A.IntExp INT)
    | STRING                            (A.StringExp(STRING, STRINGleft))
    | NIL                               (A.NilExp)
    | lvalue                            (A.VarExp lvalue)
    | lvalue ASSIGN exp                 (A.AssignExp{var=lvalue, exp=exp, pos=ASSIGNleft})
    | ID LBRACK exp RBRACK OF exp       (A.ArrayExp{typ=symbol ID, size=exp1, init=exp2, pos=IDright})
    | ctlexp                            (ctlexp)
    | opexp                             (opexp)
    | tyid crrecord                     (A.RecordExp{fields=crrecord, typ=tyid, pos=tyidright})
    (* function calls *)
    | ID LPAREN params RPAREN           (A.CallExp{func=symbol ID, args=params, pos=LPARENleft})
    (* object oriented stuff *)
    | NEW ID                            (A.NilExp) (* TODO *)

(* expression sequence *)
exps : exp                              ([(exp, expright)])
     | exp SEMICOLON exps               ([(exp, expright)] @ exps)

(* parameters *)
params : param                          (param)
       |                                ([])
param : param COMMA param               (param @ param)
      | exp                             ([exp])

(* left hand side values *)
lvalue : ID rvalue                      ()

rvalue : DOT ID                         ()
       | LBRACK exp RBRACK              ()
       | DOT ID LPAREN params RPAREN    ()
       |                                ()

(* operation expressions, ordered by precedence *)
opexp : MINUS exp          %prec UMINUS (A.OpExp{left=A.IntExp 0, oper=A.MinusOp, right=exp, pos=MINUSleft})

      | exp TIMES exp                   (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
      | exp DIVIDE exp                  (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})

      | exp PLUS exp                    (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
      | exp MINUS exp                   (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})

      | exp EQ exp                      (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
      | exp NEQ exp                     (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
      | exp GT exp                      (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
      | exp GE exp                      (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})
      | exp LT exp                      (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
      | exp LE exp                      (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})

      | exp AND exp                     (A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp 0), pos=ANDleft})
      | exp OR exp                      (A.IfExp{test=exp1, then'=A.IntExp 1, else'=SOME exp2, pos=ORleft})

(* flow control expressions *)
ctlexp : IF exp THEN exp ELSE exp       (A.IfExp{test=exp1, then'=exp2, else'=SOME exp3, pos=IFright})
       | IF exp THEN exp                (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFright})
       | WHILE exp DO exp               (A.WhileExp{test=exp1, body=exp2, pos=WHILEright})
       | FOR ID ASSIGN exp TO exp DO exp (A.ForExp{var=symbol ID, escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORright})
       | BREAK                          (A.BreakExp BREAKleft)
       | LET decs IN exps END           (A.LetExp{decs=decs, body=exps, pos=LETright})

(* record creation *)
crrecord : LBRACE RBRACE                ([])
         | LBRACE crfield RBRACE        (crfield)
crfield : crfield COMMA crfield         (crfield1 @ crfield2)
        | ID EQ exp                     ([(ID, exp, EQleft)])

